#include <iostream>

int getRandomNumber(int min, int max);

template<typename T> class Node {
public:
    T data;
    Node *next;
    Node(T data=T(), Node *next=NULL){
        this->data=data;
        this->next=next;
    }
};

template<typename T>
class List{
private:
    Node<T> *head;
    int count;
public:
    List(){
        head = NULL;
        count = NULL;
    }
    int GetSize(){return count;}
    void push_back(T data){
        if (head == NULL){
            head = new Node<T>(data);
        }
        else{
            Node<T> *current = this->head;
            
            while (current->next != NULL) {
                current = current->next;
            }
            current->next = new Node<T>(data);
        }
        count++;
    }
    T& operator[](const int index){
        int counter = 0;
        Node<T> *current = this->head;
        while (current!=NULL) {
            if (counter == index) {
                return current->data;
            }
            current = current->next;
            counter++;
        }
    }
    int find_by_value(T data){
        int count = 0;
        Node<T> *current = this->head;
        while (data!=current->data) {
            current =current->next;
            count++;
        }
        return count;
    }
};

template <typename T>
class array_list {
private:
    T *arr = NULL;
    int num = 0; // number of elements
    int size = 0;
public:
    array_list() {
        std::cout << "size? ";
        std::cin >> size;
        arr = new T[size];
    }
    ~array_list(){
        delete[] arr;
    }
    int array_size(){
        return num;
    }
    void push_back(T temp){
        if (num==size){
            std::cout << "array is full";
        }
        else {
            arr[num] = temp;
            num++;
        }
    }
    T find_by_index(int ind){
        if (ind >= 0 && ind < num){
            return arr[ind-1];
        }
        else return 0;
    }
    int find_by_value(T value){
        int i=0;
        while (arr[i]!=value) {
            i++;
        }
        return i+1;
    }
    void Print(){
        for (int i=0; i<num; i++) {
            std::cout << arr[i] << " ";
        }
    }
    void pop_back(){
        num--;
    }
    void del_by_index(int ind){
        if (ind>=num) {
            std::cout << " ";
        }
        else{
            for (int i = ind-1; i<num; i++) {
                arr[i] = arr[i+1];
            }
            num--;
        }
    }
    void dell_all(){
        num = 0;
    }
};

class DataTime{
private:
    int year,month,day,hour,minute,second;
    int day_in_year(int y);
    int day_in_month(int y,int m);
    
public:
    DataTime( int year,int month,int day,int hour,int minute,int second){
        this->year = year;
        this->month = month;
        this->day = day;
        this->hour = hour;
        this->minute = minute;
        this->second = second;
    }
    DataTime(){
        year = getRandomNumber(0, 2022);
        month = getRandomNumber(1, 12);
        day = getRandomNumber(0, day_in_month(year, month));
        hour = getRandomNumber(0, 23);
        minute = getRandomNumber(0, 59);
        second = getRandomNumber(0, 59);
    }
    int get_year(){return year;}
    int get_month(){return month;}
    int get_day(){return day;}
    int get_hour(){return hour;}
    int get_minute(){return minute;}
    int get_second(){return second;}
    
    bool leap_year(int y);
    int index();
    void plus_day();
    int days_in_date();
    void what_day();
    bool date_is_correct();
    void add_days(int t);
    int week_in_year();
    int week_in_month();
    
};

int date_diference(DataTime a, DataTime b);
void most_popular_day(DataTime a, DataTime b);

int main(){
    srand(static_cast<unsigned int>(time(0)));
   /* array_list<int> first;
    first.push_back(1);
    first.push_back(2);
    first.push_back(3);
    first.push_back(4);
    first.push_back(5);
    first.push_back(6);
    first.Print();
    first.Print();*/
    DataTime a(2022,10,31,1,1,1);
    DataTime b(2022,11,11,1,1,1);
    //std::cout << a.days_in_date() << std::endl;
    //std::cout << date_diference(a,b) << std::endl;
    //std::cout << a.week_in_month() << std::endl;
    /*List<int> a;
    a.push_back(1);
    std::cout << a.GetSize() << std::endl;
    a.push_back(2);
    a.push_back(3);
    a.push_back(4);
    std::cout << a.GetSize() << std::endl;
    std::cout << a.find_by_value(1) << std::endl;
    std::cout << a.find_by_value(2) << std::endl;
    std::cout << a.find_by_value(3) << std::endl;
    std::cout << a[0] << std::endl;*/
    std::cout << date_diference(b, a);
    most_popular_day(a, b);
    return 0;
}
int getRandomNumber(int min, int max){
    static const double fraction = 1.0 / (static_cast<double>(RAND_MAX) + 1.0);
    return static_cast<int>(rand() * fraction * (max - min + 1) + min);
}

void DataTime::what_day(){
    int t = index()%7;
    if (leap_year(year) && month == 1 && month == 2) {
        t--;
        if (t == -1) {
            t = 6;
        }
    }
    switch (t) {
        case 1:
            std::cout << "Monday" << std::endl;
            break;
        case 2:
            std::cout << "Tuesday" << std::endl;
            break;
        case 3:
            std::cout << "Wednesday" << std::endl;
            break;
        case 4:
            std::cout << "Thursday" << std::endl;
            break;
        case 5:
            std::cout << "Friday" << std::endl;
            break;
        case 6:
            std::cout << "Saturday" << std::endl;
            break;
        case 0:
            std::cout << "Sunday" << std::endl;
            break;
        default:
            std::cout << "Eror" << std::endl;
            break;
    }
}

bool DataTime::leap_year(int y){
    if(y % 400 == 0 || (y % 4 == 0 && y % 100 != 0)){return true;}
        else {return false;}
}

int DataTime::day_in_year(int y){
    if (leap_year(y)){return 366;}
    else {return 365;}
}

int DataTime:: day_in_month(int y,int m){
    int res;
    switch (m) {
        case 1 :
            res = 31;
            break;
        case 2:
            res = 28 + leap_year(y);
            break;
        case 3:
            res = 31;
            break;
        case 5:
            res = 31;
            break;
        case 7:
            res = 31;
            break;
        case 8:
            res = 31;
            break;
        case 10:
            res = 31;
            break;
        case 12:
            res = 31;
            break;
        default:
            res = 30;
            break;
    }
    return res;
}

bool DataTime::date_is_correct(){
    if (month > 12 || month < 0 ) {return false;}
    else if(day < 0 || day > day_in_month(year, month)){return false;}
    else if (hour > 23 || hour < 0){return false;}
    else if (minute > 59 || minute < 0){return false;}
    else if (second > 59 || second < 0){return false;}
    else {return true;}
}
int DataTime::days_in_date(){
    int res=1;
    int y = ((year/4)-(year/100)+(year/400));
    if(!date_is_correct()){return 0;}
    res= y*366 + (year-y)*365;
    for (int i = 1; i<month; i++) {
        res+=day_in_month(year, i);
    }
    res+=day;
    return res-365;
}
int date_diference(DataTime a, DataTime b){
    int res;
    res = a.days_in_date() - b.days_in_date();
    return res;
}
void DataTime::add_days(int t){
    for (int i = 0; i < t; i++){
        day++;
        if (day > day_in_month(year, month)){
            day = 1;
            month++;
        }
        if (month > 12) {
            month = 1;
            year++;
        }
    }
}
int DataTime::index(){
    int res=0;
    if (!date_is_correct()) {
        return 0;
    }
    int ind_month[12] = {6,2,2,5,0,3,5,1,4,6,2,4};
    int t1 = year % 100;
    int t2 = t1 / 12;
    int t3 = t1 % 12;
    int t4 = t3 / 4;
    int ind_year = t2 + t3 + t4;
    int ind_d = day;
    int ind_century = (year / 100)%2;
    
    res = ind_d + ind_year + ind_century + ind_month[month-1];
    
    return res;
}
int DataTime::week_in_year(){
    int res = (index() / 7)+1;
    return res;
}
int DataTime::week_in_month(){
    int res=1;
    res = (day / 7)+1;
    if (index()==7) {
        res--;
    }
    return res;
}
void DataTime::plus_day(){
    if (day > day_in_month(year, month)) {
        day=1;
        if (month==12) {
            month=1;
            year++;
        }
        else{
            month++;
        }
    }
    else{
        day++;
    }
}

void most_popular_day(DataTime a, DataTime b){
    std::cout << "enter a number from 1 to 31" << std::endl;
    int n;
    int arr[7]={0,0,0,0,0,0,0};
    std::cin >> n;
    if(n>31&&n<0){
    }
    else{
        int num_days=date_diference(b, a);
        for(int i=0;i<num_days;i++){
            if (n==a.get_day()) {
                int t = a.index()%7;
                if (a.leap_year(a.get_year()) && a.get_month() == 1 && a.get_month() == 2) {
                    t--;
                    if (t == -1) {
                        t = 6;
                    }
                }
                switch (t) {
                    case 1:
                        arr[0]++;
                        break;
                    case 2:
                        arr[1]++;
                        break;
                    case 3:
                        arr[2]++;
                        break;
                    case 4:
                        arr[3]++;
                        break;
                    case 5:
                        arr[4]++;
                        break;
                    case 6:
                        arr[5]++;
                        break;
                    case 0:
                        arr[6]++;
                        break;
                }
            }
            a.plus_day();
        }
    }
    int max=arr[0];
    int ind=0;
    for(int i=1;i<7;i++){
        if (arr[i]>max) {
            max=arr[i];
            ind=i;
        }
    }
    switch (ind) {
        case 0:
            std::cout << "Monday" << std::endl;
            break;
        case 1:
            std::cout << "Tuesday" << std::endl;
            break;
        case 2:
            std::cout << "Wednesday" << std::endl;
            break;
        case 3:
            std::cout << "Thursday" << std::endl;
            break;
        case 4:
            std::cout << "Friday" << std::endl;
            break;
        case 5:
            std::cout << "Saturday" << std::endl;
            break;
        case 6:
            std::cout << "Sunday" << std::endl;
            break;
    }
}
